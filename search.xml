<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端ES6（一）ES5中的严格模式</title>
    <url>/2020/09/10/%E5%89%8D%E7%AB%AFES6/%E5%89%8D%E7%AB%AFES6%EF%BC%88%E4%B8%80%EF%BC%89ES5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="ES的几个重要版本"><a href="#ES的几个重要版本" class="headerlink" title="ES的几个重要版本"></a>ES的几个重要版本</h2><ul>
<li>ES5：09年发布。</li>
<li>ES6(ES2015)：2015年发布，也称为ECMA2015。</li>
<li>ES7(ES2016)：2016年发布，也称为ECMA2016（变化不大）。</li>
</ul>
<h2 id="严格模式的理解"><a href="#严格模式的理解" class="headerlink" title="严格模式的理解"></a>严格模式的理解</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>理解</strong>：除了正常运行模式(混杂模式)，ES5添加了第二种运行模式：”严格模式”（strict mode）。</p>
<p>顾名思义，这种模式使得Javascript在更严格的语法条件下运行。</p>
<p><strong>目的</strong>：</p>
<ul>
<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为</li>
<li>消除代码运行的一些不安全之处，为代码的安全运行保驾护航</li>
<li>为未来新版本的Javascript做好铺垫</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>针对整个脚本文件：将<code>use strict</code>放在脚本文件的第一行，则整个脚本文件将以严格模式运行。</li>
<li>针对单个函数：将<code>use strict</code>放在函数体的第一行，则整个函数以严格模式运行。</li>
</ul>
<p>PS：如果浏览器不支持，则这句话只解析为一条简单的语句，没有任何副作用。</p>
<p>甲苯文件的变通写法：因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。</p>
<h3 id="语法和应为改变"><a href="#语法和应为改变" class="headerlink" title="语法和应为改变"></a>语法和应为改变</h3><ul>
<li>必须用var声明变量</li>
<li>禁止自定义的函数中的this指向window</li>
<li>对象不能有重名的属性</li>
</ul>
<h2 id="严格模式和普通模式的区别"><a href="#严格模式和普通模式的区别" class="headerlink" title="严格模式和普通模式的区别"></a>严格模式和普通模式的区别</h2><blockquote>
<p>下面列举几条严格模式的内容。</p>
</blockquote>
<h3 id="全局变量显式声明"><a href="#全局变量显式声明" class="headerlink" title="全局变量显式声明"></a>全局变量显式声明</h3><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>
<h4 id="禁止this关键字指向全局对象"><a href="#禁止this关键字指向全局对象" class="headerlink" title="禁止this关键字指向全局对象"></a>禁止this关键字指向全局对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<p>上方代码中，普通模式打印的是window。严格模式下打印的是undefined。</p>
<h4 id="构造函数必须通过new实例化对象"><a href="#构造函数必须通过new实例化对象" class="headerlink" title="构造函数必须通过new实例化对象"></a>构造函数必须通过new实例化对象</h4><p>构造函数必须通过new实例化对象，否则报错。因为this为undefined，此时无法设置属性。</p>
<p>比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Cat=<span class="function"><span class="keyword">function</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat(<span class="string">'haha'</span>);</span><br></pre></td></tr></table></figure>

<p>上方代码中，如果再严格模式下，则会报错。</p>
<h4 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h4><p>普通模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。</p>
<p>普通模式下，如果函数有多个重名的参数，可以用argument[i]读取。严格模式下，多个重名的参数属于语法错误。</p>
<p>比如下面这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    username:<span class="string">'smyh'</span>;</span><br><span class="line">    username:<span class="string">'vae'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码，在严格模式下属于语法错误，因为有重名的属性。</p>
<h4 id="函数必须声明在顶层"><a href="#函数必须声明在顶层" class="headerlink" title="函数必须声明在顶层"></a>函数必须声明在顶层</h4><p>将来JavaScript的新版本会引入“块级作用域”。为了和新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。</p>
<h4 id="新增关键字"><a href="#新增关键字" class="headerlink" title="新增关键字"></a>新增关键字</h4><p>为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。</p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端ES6（二）ES5中的严格模式</title>
    <url>/2020/09/11/%E5%89%8D%E7%AB%AFES6/%E5%89%8D%E7%AB%AFES6%EF%BC%88%E4%BA%8C%EF%BC%89ES5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
